// +build !ignore_autogenerated

// Code generated by openapi-gen. DO NOT EDIT.

// This file was autogenerated by openapi-gen. Do not edit it manually!

package v1alpha1

import (
	spec "github.com/go-openapi/spec"
	common "k8s.io/kube-openapi/pkg/common"
)

func GetOpenAPIDefinitions(ref common.ReferenceCallback) map[string]common.OpenAPIDefinition {
	return map[string]common.OpenAPIDefinition{
		"github.com/riptano/dse-operator/operator/pkg/apis/datastax/v1alpha1.DseDatacenter":       schema_pkg_apis_datastax_v1alpha1_DseDatacenter(ref),
		"github.com/riptano/dse-operator/operator/pkg/apis/datastax/v1alpha1.DseDatacenterSpec":   schema_pkg_apis_datastax_v1alpha1_DseDatacenterSpec(ref),
		"github.com/riptano/dse-operator/operator/pkg/apis/datastax/v1alpha1.DseDatacenterStatus": schema_pkg_apis_datastax_v1alpha1_DseDatacenterStatus(ref),
	}
}

func schema_pkg_apis_datastax_v1alpha1_DseDatacenter(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "DseDatacenter is the Schema for the dsedatacenters API",
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/riptano/dse-operator/operator/pkg/apis/datastax/v1alpha1.DseDatacenterSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/riptano/dse-operator/operator/pkg/apis/datastax/v1alpha1.DseDatacenterStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/riptano/dse-operator/operator/pkg/apis/datastax/v1alpha1.DseDatacenterSpec", "github.com/riptano/dse-operator/operator/pkg/apis/datastax/v1alpha1.DseDatacenterStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_datastax_v1alpha1_DseDatacenterSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "DseDatacenterSpec defines the desired state of DseDatacenter",
				Properties: map[string]spec.Schema{
					"size": {
						SchemaProps: spec.SchemaProps{
							Description: "The desired number of DSE server pods",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"version": {
						SchemaProps: spec.SchemaProps{
							Description: "DSE Version",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"repository": {
						SchemaProps: spec.SchemaProps{
							Description: "Repository to grab the DSE image from",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"annotations": {
						SchemaProps: spec.SchemaProps{
							Description: "Annotations",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"labels": {
						SchemaProps: spec.SchemaProps{
							Description: "Labels",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"config": {
						SchemaProps: spec.SchemaProps{
							Description: "Definition file config",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"resources": {
						SchemaProps: spec.SchemaProps{
							Description: "Resource requirements",
							Ref:         ref("k8s.io/api/core/v1.ResourceRequirements"),
						},
					},
					"racks": {
						SchemaProps: spec.SchemaProps{
							Description: "Racks is an exported field, BUT it is highly recommended that GetRacks() be used for accessing in order to handle the case where no rack is defined",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/riptano/dse-operator/operator/pkg/apis/datastax/v1alpha1.DseRack"),
									},
								},
							},
						},
					},
					"storageClaim": {
						SchemaProps: spec.SchemaProps{
							Description: "StorageClaim",
							Ref:         ref("github.com/riptano/dse-operator/operator/pkg/apis/datastax/v1alpha1.DseStorageClaim"),
						},
					},
					"clusterName": {
						SchemaProps: spec.SchemaProps{
							Description: "DSE ClusterName",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"parked": {
						SchemaProps: spec.SchemaProps{
							Description: "Parked state means we do not want any DSE processes running",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
				Required: []string{"size", "version", "clusterName", "parked"},
			},
		},
		Dependencies: []string{
			"github.com/riptano/dse-operator/operator/pkg/apis/datastax/v1alpha1.DseRack", "github.com/riptano/dse-operator/operator/pkg/apis/datastax/v1alpha1.DseStorageClaim", "k8s.io/api/core/v1.ResourceRequirements"},
	}
}

func schema_pkg_apis_datastax_v1alpha1_DseDatacenterStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "DseDatacenterStatus defines the observed state of DseDatacenter",
				Properties: map[string]spec.Schema{
					"nodes": {
						SchemaProps: spec.SchemaProps{
							Description: "The number of the DSE server nodes",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
				},
				Required: []string{"nodes"},
			},
		},
		Dependencies: []string{},
	}
}
