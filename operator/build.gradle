plugins {
    id 'base'
    id 'com.github.blindpirate.gogradle' version '0.11.4'
    id 'com.bmuschko.docker-remote-api' version '4.8.1'
}

ext {
    binaryFullPath = "$buildDir/bin/dse-\${PROJECT_NAME}-\${GOOS}-\${GOARCH}"
}

golang {
    packagePath = 'github.com/riptano/dse-operator/operator'
    goVersion = '1.13.4'
    goExecutable = 'IGNORE_LOCAL'
}
import com.github.blindpirate.gogradle.crossplatform.Arch
import com.github.blindpirate.gogradle.crossplatform.Os

goBuild {
    targetPlatform = [ "${Os.hostOs}-${Arch.hostArch}", 'linux-amd64']*.toString()
    go (["build", '-o', binaryFullPath, "-ldflags", "-X main.version=$version", "${golang.packagePath}/cmd/manager"]*.toString())
    outputLocation = binaryFullPath
}

check.dependsOn goTest

import com.bmuschko.gradle.docker.tasks.image.*

task copyDockerFiles(type: Copy) {
    from 'docker'
    into buildDir
}

task dockerImage(type: DockerBuildImage, group: 'Docker', description: 'Build operator Docker image') {
    dependsOn 'buildLinuxAmd64', copyDockerFiles
    inputDir = buildDir
    tags.add("datastax/dse-${project.name}:${version.toString().replaceAll('[^a-zA-Z0-9\\.\\-_]', '_')}")
    tags.add("datastax/dse-${project.name}:latest")
}

assemble.dependsOn goBuild, dockerImage

[resolveBuildDependencies, installDependencies]*.enabled = false

import com.github.blindpirate.gogradle.Go

tasks.matching { (it.name.startsWith('build') && it instanceof Go ) || it.name == 'goTest' }.all {
    environment 'GO111MODULES': 'on', 'CGO_ENABLED': '0'
    inputs.file 'go.mod'
}

[resolveBuildDependencies, installDependencies, resolveTestDependencies]*.enabled = false

task upLocal(type: LocalOperatorStart, group: 'Run', description: 'Run the operator locally against the configured k8s cluster')

gradle.projectsEvaluated {
    tasks.matching { it.name == "build${Os.hostOs.toString().capitalize()}${Arch.hostArch.toString().capitalize()}"}.all { t ->
        upLocal {
            dependsOn t
            commandLine t.outputs.files.singleFile
        }
    }
}

class LocalOperatorStart extends Exec {

    LocalOperatorStart() {
        environment.WATCH_NAMESPACE = 'default'
    }
    @Option(option="namespace", description="k8s namespace to watch for events, default to 'default'")
    void setNamespace(String ns) {
        environment.WATCH_NAMESPACE = ns
    }
}
