// Variable to hold serialized test run info
mRuns = ""

pipeline {
    agent any
    environment {
        GITHUB_TOKEN = credentials('github-api-token')
        FALLOUT_OAUTH_TOKEN = credentials('fallout-test-oauth')
    }
    parameters {
        string(name: 'M_FTEST', defaultValue: '', description: 'Specific test yaml file to run. Leave empty to run all.')
    }
    stages {
        stage('Queue Tests') {
            steps {
                sh 'mage fallout:queue'
                script {
                    env.WORKSPACE = pwd()
                    mRuns = readFile("${env.WORKSPACE}/fallout/build/queuedruns.txt").trim()
                }
            }
        }
        stage('Monitor Tests') {
            steps {
                sh "mage -compile ./fallout/build/fallout_mage"
                script {
                    def staticMage = "./fallout/build/fallout_mage"
                    def monitorStages = [:]
                    for (f in mRuns.tokenize(",")) {
                        def runTokens = mRuns.tokenize(":")
                        def tname = runTokens[0]
                        def tid = runTokens[1]
                        monitorStages["${tname}"] = {
                            try {
                                stage("Wait for test: ${tname}") {
                                    sh "M_RUNS=${mRuns} ${staticMage} fallout:wait"
                                }
                            } finally {
                                sh "M_RUNS=${mRuns} ${staticMage} fallout:artifacts"
                                archiveArtifacts "fallout/build/*/${tname}/${tid}/**/*"
                            }
                        }
                    }
                    parallel monitorStages
                }
            }
        }
    }
    post {
        aborted {
            script {
                if (mRuns != "") {
                    sh "M_RUNS=${mRuns} mage fallout:abort"
                }
            }
        }
    }
}
